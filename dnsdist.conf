-- Define upstream DNS servers
setKey("q+GpINtsMpEDdlaf4ES5xi8j8J6hpJsSAPkoQS2gh68=")
newServer({address="172.31.18.21:5353",useClientSubnet=true, useProxyProtocol=true})     -- Custom DNS
newServer({address="9.9.9.9:53", name="quad9"})        -- Backup DNS 1
newServer({address="1.1.1.1:53", name="cloudflare"})   -- Backup DNS 2

controlSocket("127.0.0.1:5199")


-- Listen on all interfaces
setLocal("0.0.0.0:53")
setACL({'0.0.0.0/0'})  -- Allow queries from anywhere
-- Use first available healthy server
setServerPolicy(firstAvailable)



setECSSourcePrefixV4(32)
setECSSourcePrefixV6(128)
setECSOverride(true)



-- List of trusted client IPs
trustedClients = {
    "182.74.58.202",  -- Example trusted IP
    "52.223.47.52"
}

-- Function to check if an IP is trusted
function isTrustedClient(ip)
    for _, trustedIP in ipairs(trustedClients) do
        if ip == trustedIP then
            return true
        end
    end
    return false
end


-- Log all client requests
addAction(AllRule(), LuaAction(function(dq)
    clientIP = dq.remoteaddr:toString()
    local queryName = dq.qname:toString()
    local queryType = dq.qtype
    local timestamp = os.date("%Y-%m-%d %H:%M:%S")

    if isTrustedClient(clientIP) then
        -- Log trusted client request
        print(string.format("[%s] Trusted client: %s queried %s (%d)",
                timestamp, clientIP, queryName, queryType))
    else
        -- Log untrusted client request
        print(string.format("[%s] Untrusted client: %s queried %s (%d)",
                timestamp, clientIP, queryName, queryType))
    end

    return DNSAction.None  -- Allow query processing
end))
